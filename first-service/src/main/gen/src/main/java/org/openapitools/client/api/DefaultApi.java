/*
 * Oscar Service API
 * REST API для управления коллекцией фильмов.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Error;
import org.openapitools.client.model.GenresRedistributeRewardsFromGenreToGenrePost200Response;
import org.openapitools.client.model.MovieGenre;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for directorsGetLoosersGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Список режиссёров </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Неверный запрос </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call directorsGetLoosersGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/directors/get-loosers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call directorsGetLoosersGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return directorsGetLoosersGetCall(_callback);

    }

    /**
     * Получить режиссёров без оскаров
     * Возвращает список режиссёров, ни один фильм которых не получил \&quot;Оскара\&quot;.
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Список режиссёров </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Неверный запрос </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public List<String> directorsGetLoosersGet() throws ApiException {
        ApiResponse<List<String>> localVarResp = directorsGetLoosersGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Получить режиссёров без оскаров
     * Возвращает список режиссёров, ни один фильм которых не получил \&quot;Оскара\&quot;.
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Список режиссёров </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Неверный запрос </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> directorsGetLoosersGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = directorsGetLoosersGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Получить режиссёров без оскаров (asynchronously)
     * Возвращает список режиссёров, ни один фильм которых не получил \&quot;Оскара\&quot;.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Список режиссёров </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Неверный запрос </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call directorsGetLoosersGetAsync(final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = directorsGetLoosersGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for genresRedistributeRewardsFromGenreToGenrePost
     * @param fromGenre Жанр, откуда забираются награды (required)
     * @param toGenre Жанр, куда передаются награды (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Операция завершена успешно </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Неверный запрос </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Требуется аутентификация </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Доступ запрещен </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Нарушены бизнес-правила </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call genresRedistributeRewardsFromGenreToGenrePostCall(MovieGenre fromGenre, MovieGenre toGenre, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/genres/redistribute-rewards/{from-genre}/{to-genre}"
            .replace("{" + "from-genre" + "}", localVarApiClient.escapeString(fromGenre.toString()))
            .replace("{" + "to-genre" + "}", localVarApiClient.escapeString(toGenre.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call genresRedistributeRewardsFromGenreToGenrePostValidateBeforeCall(MovieGenre fromGenre, MovieGenre toGenre, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fromGenre' is set
        if (fromGenre == null) {
            throw new ApiException("Missing the required parameter 'fromGenre' when calling genresRedistributeRewardsFromGenreToGenrePost(Async)");
        }

        // verify the required parameter 'toGenre' is set
        if (toGenre == null) {
            throw new ApiException("Missing the required parameter 'toGenre' when calling genresRedistributeRewardsFromGenreToGenrePost(Async)");
        }

        return genresRedistributeRewardsFromGenreToGenrePostCall(fromGenre, toGenre, _callback);

    }

    /**
     * Перераспределить Оскары между жанрами
     * 
     * @param fromGenre Жанр, откуда забираются награды (required)
     * @param toGenre Жанр, куда передаются награды (required)
     * @return GenresRedistributeRewardsFromGenreToGenrePost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Операция завершена успешно </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Неверный запрос </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Требуется аутентификация </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Доступ запрещен </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Нарушены бизнес-правила </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public GenresRedistributeRewardsFromGenreToGenrePost200Response genresRedistributeRewardsFromGenreToGenrePost(MovieGenre fromGenre, MovieGenre toGenre) throws ApiException {
        ApiResponse<GenresRedistributeRewardsFromGenreToGenrePost200Response> localVarResp = genresRedistributeRewardsFromGenreToGenrePostWithHttpInfo(fromGenre, toGenre);
        return localVarResp.getData();
    }

    /**
     * Перераспределить Оскары между жанрами
     * 
     * @param fromGenre Жанр, откуда забираются награды (required)
     * @param toGenre Жанр, куда передаются награды (required)
     * @return ApiResponse&lt;GenresRedistributeRewardsFromGenreToGenrePost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Операция завершена успешно </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Неверный запрос </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Требуется аутентификация </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Доступ запрещен </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Нарушены бизнес-правила </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GenresRedistributeRewardsFromGenreToGenrePost200Response> genresRedistributeRewardsFromGenreToGenrePostWithHttpInfo(MovieGenre fromGenre, MovieGenre toGenre) throws ApiException {
        okhttp3.Call localVarCall = genresRedistributeRewardsFromGenreToGenrePostValidateBeforeCall(fromGenre, toGenre, null);
        Type localVarReturnType = new TypeToken<GenresRedistributeRewardsFromGenreToGenrePost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Перераспределить Оскары между жанрами (asynchronously)
     * 
     * @param fromGenre Жанр, откуда забираются награды (required)
     * @param toGenre Жанр, куда передаются награды (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Операция завершена успешно </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Неверный запрос </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Требуется аутентификация </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Доступ запрещен </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Нарушены бизнес-правила </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call genresRedistributeRewardsFromGenreToGenrePostAsync(MovieGenre fromGenre, MovieGenre toGenre, final ApiCallback<GenresRedistributeRewardsFromGenreToGenrePost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = genresRedistributeRewardsFromGenreToGenrePostValidateBeforeCall(fromGenre, toGenre, _callback);
        Type localVarReturnType = new TypeToken<GenresRedistributeRewardsFromGenreToGenrePost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
